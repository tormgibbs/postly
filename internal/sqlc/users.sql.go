// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package sqlc

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (whatsapp_id)
VALUES ($1)
ON CONFLICT (whatsapp_id) DO UPDATE SET updated_at = now()
RETURNING id, whatsapp_id, is_logged_in, created_at, updated_at
`

func (q *Queries) CreateUser(ctx context.Context, whatsappID string) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, whatsappID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.WhatsappID,
		&i.IsLoggedIn,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByWhatsAppID = `-- name: GetUserByWhatsAppID :one
SELECT id, whatsapp_id, is_logged_in, created_at, updated_at FROM users WHERE whatsapp_id = $1 LIMIT 1
`

func (q *Queries) GetUserByWhatsAppID(ctx context.Context, whatsappID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByWhatsAppID, whatsappID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.WhatsappID,
		&i.IsLoggedIn,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const setUserLoggedIn = `-- name: SetUserLoggedIn :exec
UPDATE users
SET is_logged_in = true, updated_at = now()
WHERE whatsapp_id = $1
`

func (q *Queries) SetUserLoggedIn(ctx context.Context, whatsappID string) error {
	_, err := q.db.ExecContext(ctx, setUserLoggedIn, whatsappID)
	return err
}
