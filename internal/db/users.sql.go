// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (whatsapp_id)
VALUES ($1)
ON CONFLICT (whatsapp_id) DO UPDATE SET updated_at = now()
RETURNING id, whatsapp_id, access_token, refresh_token, token_expiry, is_logged_in, created_at, updated_at
`

func (q *Queries) CreateUser(ctx context.Context, whatsappID string) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, whatsappID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.WhatsappID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.TokenExpiry,
		&i.IsLoggedIn,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByWhatsAppID = `-- name: GetUserByWhatsAppID :one
SELECT id, whatsapp_id, access_token, refresh_token, token_expiry, is_logged_in, created_at, updated_at FROM users WHERE whatsapp_id = $1 LIMIT 1
`

func (q *Queries) GetUserByWhatsAppID(ctx context.Context, whatsappID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByWhatsAppID, whatsappID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.WhatsappID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.TokenExpiry,
		&i.IsLoggedIn,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const setUserLoggedInWithToken = `-- name: SetUserLoggedInWithToken :exec
UPDATE users
SET 
  is_logged_in = true,
  access_token = $2,
  refresh_token = $3,
  token_expiry = $4,
  updated_at = now()
WHERE whatsapp_id = $1
`

type SetUserLoggedInWithTokenParams struct {
	WhatsappID   string
	AccessToken  sql.NullString
	RefreshToken sql.NullString
	TokenExpiry  sql.NullTime
}

func (q *Queries) SetUserLoggedInWithToken(ctx context.Context, arg SetUserLoggedInWithTokenParams) error {
	_, err := q.db.ExecContext(ctx, setUserLoggedInWithToken,
		arg.WhatsappID,
		arg.AccessToken,
		arg.RefreshToken,
		arg.TokenExpiry,
	)
	return err
}
